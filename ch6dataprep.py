# -*- coding: utf-8 -*-
"""DataPrep.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12mp9RejCfzRh4m7y8DpyKkXQWMI_Npea
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('UsedCars.csv')
df.head(15)

df.hist()

price = df['price']
year = df['model_date']
plt.plot(year, price, linestyle="none", marker="o")

plt.plot(df['manufacturer'], price, linestyle = 'none', marker = 'o')

def replaceMileage(df1):
    mileage = []
    for x in df1['mileage_from_odometer']:
        s = x.replace(',', '')
        s = s.replace('km', '')
        s = s.strip()
        mileage.append((float)(s))
    return mileage

dfSample = df.sample(frac = 0.1)
mileage = replaceMileage(dfSample)
mileage = np.array(mileage)
colors = 0.04 * mileage
plt.scatter(dfSample['model_date'], dfSample['price'] / 15000, s = mileage / 900, c = colors, alpha = 0.5)

v1 = df['model_date'].value_counts()
plt.subplot(1, 2, 1)
plt.pie(v1, labels = v1.index)
v2 = df['fuel_type'].value_counts()
colors = plt.get_cmap('Blues')(np.linspace(0.2, 0.7, len(v2)))
plt.subplot(1, 2, 2)
plt.bar(v2.index, v2, edgecolor = 'black', width = 1, color = colors)

v3 = df['vehicle_transmission'].value_counts()
plt.pie(v3, labels = v3.index)

plt.subplot(1, 2, 1)
plt.boxplot(replaceMileage(df))
plt.subplot(1, 2, 2)
plt.boxplot(df['model_date'])

df = df.replace(r'^\s*$', np.nan, regex=True)
df.isna().sum()
df.describe()

# drop duplicates rows
print(df.shape)
df = df.drop_duplicates()
print(df.shape)

# remove the currency, description, item_condition, manufacturer and brand columns
dfRemColumns = df.drop(['currency', 'description', 'item_condition', 'manufacturer', 'brand'], axis = 1)
dfRemColumns.head()

encoder1 = LabelEncoder()
fuel_type = dfRemColumns['fuel_type']
fuel_type_encoded = encoder1.fit_transform(fuel_type)
encoder1.classes_

encoder2 = LabelEncoder()
vehicle_transmission = dfRemColumns['vehicle_transmission']
vehicle_transmission_encoded = encoder2.fit_transform(vehicle_transmission)
encoder2.classes_

# drop the original columns and add the encoded columns instead
dfEncoded = dfRemColumns.drop(['fuel_type', 'vehicle_transmission'], axis = 1)
dfEncoded['fuel_type_encoded'] = fuel_type_encoded
dfEncoded['vehicle_transmission_encoded'] = vehicle_transmission_encoded
dfEncoded.head()

# removes the 'cc' from the engine column
def removeCC(str):
    if not(str[0].isdigit()):
        return np.nan
    return (int)(str.replace('cc', ''))

# formats the mileage column to be a number
def formatKM(km):
    km = km.replace('km', '')
    km = km.replace(',', '')
    km = km.strip()
    return (int)(km)

# apply the functions to the columns
dfNumeric = dfEncoded.copy()
dfNumeric['vehicle_engine'] = dfNumeric['vehicle_engine'].apply(removeCC)
dfNumeric['mileage_from_odometer'] = dfNumeric['mileage_from_odometer'].apply(formatKM)
dfNumeric.head()

print(dfNumeric.isna().sum())
print(dfNumeric.shape)
dfNumeric.dropna(inplace = True)
print(dfNumeric.shape)

dfNumeric[dfNumeric['model_date'] < 1998].count()
dfNumeric['mileage_from_odometer'].describe()
dfOutliers = dfNumeric[dfNumeric['model_date'] >= 1998]
dfOutliers = dfOutliers[(dfOutliers['mileage_from_odometer'] >= 10000) & (dfOutliers['mileage_from_odometer'] <= 500000)]
dfOutliers['mileage_from_odometer'].describe()

scaler = StandardScaler()

dfStandard = pd.DataFrame(scaler.fit_transform(dfOutliers), columns = dfOutliers.columns)
dfStandard.head()

dfStandard.to_csv('UsedCarsClean.csv')